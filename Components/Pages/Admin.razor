@page "/admin"
@using Poll.DAL.Entities
@using Poll.Events
@using Poll.Services
@inject ILogger<Home> AdminLogger
@inherits Poll.Components.Components.BaseRefreshableComponent

<PageTitle>Admin</PageTitle>

<h1>Questions</h1>

CurrentGame: @CurrentGame <br/>

@if (CurrentGame == null)
{
    <p>Chargement...</p>
}
else
{
    <strong>@CurrentGame.Name (@CurrentGame.State)</strong>

    @for (var index = 0; index < CurrentGame.Questions.ToArray().Length; index++)
    {
        var question = CurrentGame.Questions.ToArray()[index];
        <div class="mt-4">
            @if (question.IsCurrent)
            {
                <strong>[@(index+1)] @question.Content</strong>
            }
            else
            {
                <div>[@(index+1)] @question.Content</div>
            }

            @foreach (var choice in question.Choices)
            {
                <div>@choice.Content</div>
            }
        </div>
    }
    
    <button @onclick="Next">Next</button>
}


@code {
    private async Task Next()
    {
        await DatabaseWriteContextProvider.Write<GameService, int>(async svc =>
        {
            if (CurrentGame is null)
            {
                return 0; 
            }
            
            if (CurrentGame.State == GameState.InPreparation)
            {
                await svc.SetGameWaitingForPlayers(CurrentGame.Id);
            }else if (CurrentGame.State == GameState.WaitingForPlayers)
            {
                await svc.StartGame(CurrentGame.Id);
            }else if (CurrentGame.State == GameState.DisplayQuestionResult)
            {
                await svc.MoveToNextQuestion();
            }else if (CurrentGame.State == GameState.AskingQuestion)
            {
                await svc.ValidateQuestion();
            }

            return 0;
        });
    }

    protected override ILogger Logger => AdminLogger;
}