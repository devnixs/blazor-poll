@page "/admin"
@using Poll.DAL.Entities
@using Poll.Events
@using Poll.Services
@using GameState = Poll.Services.GameState
@inject ILogger<Home> AdminLogger
@inject GameState GameState

<PageTitle>Admin</PageTitle>

<div class="d-flex justify-content-between">
    <h1>Questions</h1>

    <div>
        @if (CurrentGame is not null)
        {
            <button class="btn btn-outline-success me-2" @onclick="Next">
                Next
                <i class="fa fa-arrow-right fa-fw"></i>
            </button>
        }

        <button class="btn btn-outline-primary" @onclick="RefreshState" disabled="@_refreshing">
            Refresh state
            @if (_refreshing)
            {
                <i class="fa fa-refresh fa-spin fa-fw"></i>
            }
            else
            {
                <i class="fa fa-bolt fa-fw"></i>
            }
        </button>
    </div>
</div>

@if (CurrentGame == null)
{
    <p>Chargement...</p>
}
else
{
    <strong>@CurrentGame.Name (@CurrentGame.State)</strong>

    @for (var index = 0; index < CurrentGame.Questions.ToArray().Length; index++)
    {
        var question = CurrentGame.Questions.ToArray()[index];
        <div class="mt-4">
            @if (question.IsCurrent)
            {
                <strong>[@(index + 1)] @question.Content</strong>
            }
            else
            {
                <div>[@(index + 1)] @question.Content</div>
            }

            @foreach (var choice in question.Choices)
            {
                <div>@choice.Content</div>
            }
        </div>
    }
}


@code {

    private async Task Next()
    {
        await DatabaseWriteContextProvider.Write<GameService, int>(async svc =>
        {
            if (CurrentGame is null)
            {
                return 0;
            }

            if (CurrentGame.State == GameStatus.InPreparation)
            {
                await svc.SetGameWaitingForPlayers(CurrentGame.Id);
            }
            else if (CurrentGame.State == GameStatus.WaitingForPlayers)
            {
                await svc.StartGame(CurrentGame.Id);
            }
            else if (CurrentGame.State == GameStatus.DisplayQuestionResult)
            {
                await svc.MoveToNextQuestion();
            }
            else if (CurrentGame.State == GameStatus.AskingQuestion)
            {
                await svc.ValidateQuestion();
            }

            return 0;
        });
    }

    bool _refreshing = false;

    private async Task RefreshState()
    {
        _refreshing = true;
        StateHasChanged();
        try
        {
            await GameState.LoadData();
        }
        finally
        {
            _refreshing = false;
        }
    }

    protected override ILogger Logger => AdminLogger;
}