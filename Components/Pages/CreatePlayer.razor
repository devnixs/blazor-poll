@page "/create-player"
@using Poll.DAL.Entities
@using Poll.Services
@using Poll.DAL
@using Microsoft.EntityFrameworkCore

@attribute [RenderModeInteractiveServer]
@inject AppSynchronizer Synchronizer
@inject ILogger<Home> Logger
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<EditForm class="row g-3" Model="@Model" OnSubmit="@Submit">
    <div class="mb-3">
        <label for="firstname" class="form-label">Prénom:</label>
        <InputText type="text" class="form-control" @bind-Value="Model!.Name" id="firstname" placeholder="" />
    </div>
    <div class="col-auto">
        <button type="submit" class="btn btn-primary mb-3">OK</button>
    </div>
</EditForm>

@code {

    public Player Model { get; set; } = new Player()
    {
        Name = "",
    };
    
    protected override async Task OnInitializedAsync()
    {
        await using var scope = ServiceProvider.CreateAsyncScope();
        if (scope.ServiceProvider.GetRequiredService<HttpUtils>().IsPreRendering())
        {
            return;
        }
        var player = await scope.ServiceProvider.GetRequiredService<PlayerService>().GetPlayer();
        if (player is not null)
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(Model?.Name))
        {
            return;
        }

        
        await using var scope = ServiceProvider.CreateAsyncScope();
        var context = scope.ServiceProvider.GetRequiredService<HttpUtils>().IsPreRendering();
        await scope.ServiceProvider.GetRequiredService<PlayerService>().SetPlayerName(Model.Name);
        NavigationManager.NavigateTo("/");
    }
}