@page "/create-player/{GameId}"
@using Poll.DAL.Entities
@using Poll.Services
@using System.Text.RegularExpressions

@inject ILogger<CreatePlayer> Logger
@inject HttpUtils httpUtils
@inject NavigationManager NavigationManager
@inject PlayerService PlayerService

<PageTitle>Home</PageTitle>

@if (_editContext is not null)
{
    <EditForm class="row g-3" EditContext="@_editContext" Model="@(null)" OnValidSubmit="@OnValidSubmit">
        <div class="mb-3">
            <label for="firstname" class="form-label">Prénom:</label>
            <InputText type="text" class="form-control" maxlength="24" @bind-Value="Model!.Name" id="firstname" placeholder=""/>
            <ValidationMessage For="() => Model.Name"></ValidationMessage>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary mb-3">OK</button>
        </div>
        <FluentValidationValidator/>
    </EditForm>
}


@code {

    [Parameter]
    public string? GameId { get; set; }
    
    public string? ErrorMessage { get; set; }

    public Guid? GameIdGuid { get; set; }

    public Player Model { get; set; } = new Player()
    {
        Name = "",
    };

    private EditContext? _editContext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (await httpUtils.IsPreRendering())
        {
            return;
        }

        Logger.LogInformation("GameId is {}", GameId);
        if (!string.IsNullOrEmpty(GameId) && Guid.TryParse(GameId, out var g))
        {
            GameIdGuid = g;
        }
        Logger.LogInformation("Parsed GameId is {}", GameIdGuid);

        if (GameIdGuid is null)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }

        var player = await PlayerService.GetPlayer(GameIdGuid.Value);
        if (player is not null)
        {
            Model.Name = player.Name;
        }
        
        _editContext = new(Model);
    }

    public async Task OnValidSubmit()
    {
        var firstLetter = Model.Name[0..1];
        var rest = Model.Name[1..];
        var updated = firstLetter.ToUpperInvariant() + rest;

        if (GameIdGuid != null)
        {
            await PlayerService.SetPlayerName(GameIdGuid.Value, updated);
            NavigationManager.NavigateTo("/game/" + GameIdGuid.Value);
        }
    }
}