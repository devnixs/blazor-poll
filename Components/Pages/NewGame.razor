@page "/new-game"
@using System.Text.Json
@using System.ComponentModel.DataAnnotations

<div class="container mt-5">
    <h2 class="mb-4">Nouveau jeu</h2>
    <EditForm EditContext="_editContext" OnValidSubmit="OnSubmit" FormName="NewGame">
        <div class="mb-3">
            <label for="name" class="form-label">Nom du jeu</label>
            <InputText type="text" class="form-control" @bind-Value="_model!.Name" id="name" placeholder=""/>
        </div>

        <hr/>

        @for (var questionIndex = 0; questionIndex < _model.Questions.Length; questionIndex++)
        {
            var question = _model.Questions[questionIndex];
            var i1 = questionIndex;

            <div class="border border-1 rounded-1 p-3 mb-3">
                <div class="mb-3">
                    <label for="@($"questionTitle-{i1}")" class="form-label">Titre de la question #@(i1 + 1)</label>
                    <InputText type="text" @bind-Value="question.Name" id="@($"questionTitle-{i1}")" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="@($"QuestionImage-{i1}")" class="form-label">Image (pendant que la question est posée)</label>
                    <InputText type="text" @bind-Value="question.QuestionImage" id="@($"QuestionImage-{i1}")" class="form-control"/>
                </div>
                <div class="mb-3">
                    <label for="@($"ResponseImage-{i1}")" class="form-label">Image (pendant que la réponse est présentée)</label>
                    <InputText type="text" @bind-Value="question.ResponseImage" id="@($"ResponseImage-{i1}")" class="form-control"/>
                </div>

                @for (var choiceIndex = 0; choiceIndex < question.Choices.Length; choiceIndex++)
                {
                    var choice = question.Choices[choiceIndex];
                    var i2 = choiceIndex;

                    <div class="row offset-lg-1">
                        <div class="mb-3 col">
                            <label for="@($"ChoiceText-{i1}-{i2}")" class="form-label">Choix #@(i2 + 1)</label>
                            <InputText type="text" @bind-Value="choice.Content" id="@($"ChoiceText-{i1}-{i2}")" class="form-control"/>
                        </div>

                        <div class="mb-3 col">
                            <div class="form-check pt-4">
                                <InputCheckbox class="form-check-input" @bind-Value="@choice.IsValid" type="checkbox" id="@($"ChoiceValid-{i1}-{i2}")"/>
                                <label class="form-check-label" for="@($"ChoiceValid-{i1}-{i2}")">
                                    Bonne réponse?
                                </label>
                            </div>
                        </div>

                        <div class="col pt-4">
                            <button type="button" class="btn btn-link" @onclick="() => DeleteChoice(i1, i2)">Supprimer ce choix</button>
                        </div>
                    </div>
                }
                <div class="offset-lg-1">
                    <button type="button" class="btn btn-secondary text-white"><i class="fa fa-plus"></i> Ajouter un choix</button>
                </div>


                <button type="button" class="btn btn-link mt-3" @onclick="() => DeleteQuestion(i1)">Supprimer cette question</button>
            </div>
        }
        <div class="">
            <button type="button" class="btn btn-primary text-white"><i class="fa fa-plus"></i> Ajouter une question</button>
        </div>

@*         <pre>@JsonSerializer.Serialize(_model, new JsonSerializerOptions() *@
@* { *@
@* WriteIndented = true, *@
@* })</pre> *@
        
        <DataAnnotationsValidator/>
        <ValidationSummary/>

        <button type="submit" class="btn btn-primary mt-3">Envoyer</button>
    </EditForm>

</div>
@code{

    private NewGameModel _model = new NewGameModel()
    {
        Questions = new QuestionModel[]
        {
            new QuestionModel()
            {
                Name = "",
                QuestionImage = "",
                ResponseImage = "",
                Choices = new AnswerModel[]
                {
                    new AnswerModel()
                    {
                        Content = "",
                        IsValid = true,
                    },
                    new AnswerModel()
                    {
                        Content = "",
                        IsValid = false,
                    },
                    new AnswerModel()
                    {
                        Content = "",
                        IsValid = false,
                    },
                }
            },
        }
    };

    EditContext? _editContext = null;

    public Task OnSubmit()
    {
        Console.WriteLine("Form Submitted");
        return Task.CompletedTask;
    }

    public void DeleteChoice(int questionIndex, int choiceIndex)
    {
        Console.WriteLine("Choice deleted " + questionIndex + " - " + choiceIndex);
    }

    public void DeleteQuestion(int questionIndex)
    {
        Console.WriteLine("Question deleted " + questionIndex);
    }

    protected override void OnInitialized()
    {
        _model ??= new();
        _editContext = new(_model);
        _editContext.OnValidationRequested += EditContextOnOnValidationRequested;
        _editContext.OnFieldChanged += EditContextOnOnFieldChanged;
    }

    private void EditContextOnOnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        Console.WriteLine($"On field changed {e.FieldIdentifier.FieldName} {sender}");
    }

    private void EditContextOnOnValidationRequested(object? sender, ValidationRequestedEventArgs e)
    {
        _editContext.Validate();
        
        Console.WriteLine("Validation Requested");
    }

    class NewGameModel
    {
        [Required]
        public string Name { get; set; }

        public QuestionModel[] Questions { get; set; }
    }

    class QuestionModel
    {
        [Required]
        public string Name { get; set; }
        public string QuestionImage { get; set; }
        public string ResponseImage { get; set; }

        public AnswerModel[] Choices { get; set; }
    }

    class AnswerModel
    {
        [Required]
        public string Content { get; set; }

        public bool IsValid { get; set; }
    }

}