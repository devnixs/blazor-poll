@page "/game/{GameId}"
@using Poll.Services
@using Poll.DAL.Entities
@using Poll.Components.Components
@inject HttpUtils HttpUtils
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager
@inject ILogger<Home> HomeLogger
@inherits Poll.Components.Components.BaseRefreshableComponent

@if (CurrentGame is null)
{
    <PageTitle>Home</PageTitle>
}
else if (_isAdmin)
{
    <PageTitle>Admin: @CurrentGame.Template.Name</PageTitle>
}
else
{
    <PageTitle>@CurrentGame.Template.Name</PageTitle>
}


<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="top-bar">
    @if (CurrentGame is not null)
    {
        <span>@CurrentGame.Template.Name</span>

        <div class="text-right">
            @if (!string.IsNullOrEmpty(_player?.Name))
            {
                <a href="/create-player/@CurrentGame.Id">
                    <strong>@_player?.Name</strong> <i class="fa fa-pencil ml-3"></i>
                </a>
            }
        </div>
        
        @if (_isAdmin && CurrentGame?.Status != GameStatus.Completed)
        {
            <div class="text-end mb-1">
                <button class="btn btn-outline-success me-2" @onclick="Next">
                    Next
                    <i class="fa fa-arrow-right fa-fw"></i>
                </button>
            </div>
        }
    }
    
</Microsoft.AspNetCore.Components.Sections.SectionContent>


<div class="row pb-5">
    <div class="col-12 col-md-8">
        <div>
            @if (CurrentGame is not null && CurrentGame.Status == GameStatus.Completed)
            {
                <div class="game-end">🎉</div>
            }
            else if (CurrentGame == null || CurrentGame.CurrentQuestion == null || CurrentGame.Status == GameStatus.WaitingForPlayers)
            {
                @if (CurrentGame?.Status == GameStatus.WaitingForPlayers)
                {
                   @if (!_isAdmin)
                   {
                       <h1 class="text-center">
                           Le jeu va bientôt démarrer, merci de patienter!
                       </h1>
                   }
                   else
                   {
                       <h1 class="text-center">
                           Partagez ce QR Code avec vos joueurs
                       </h1>
                   }
                    <div class="qrcode-container">
                        @if (CurrentGame is not null)
                        {
                            <QrCodeRenderer GameId="CurrentGame.Id"/>
                        }
                    </div>
                }
                
                @if (CurrentGame?.Status == GameStatus.Completed)
                {
                    <h1 class="text-center">
                        🎉
                    </h1>
                }
                
                if (CurrentGame is null)
                {
                    <h1 class="text-center">
                        Chargement...
                    </h1>
                }
            }
            else if (CurrentGame.Status == GameStatus.AskingQuestion)
            {
                <h1 class="text-center mb-3 question-title">
                    @CurrentGame.CurrentQuestion.Content
                </h1>
                
                if (CurrentGame.CurrentQuestion.AskingQuestionImageId.HasValue)
                {
                    <div class="image-container">
                        <img class="image-details" src="/file/get/@CurrentGame.CurrentQuestion.AskingQuestionImageId" alt="Question Image" />
                    </div>
                }

                <div class="question-container">
                    @for (var index = 0; index < CurrentGame.CurrentQuestion.Choices.ToArray().Length; index++)
                    {
                        var choice = CurrentGame.CurrentQuestion.Choices.ToArray()[index];
                        <div
                            @onclick="() => OnSelectChoice(choice.Id)"
                            @key="choice.Id"
                            class="question question-@index @(_answer != null ? (_answer.ChoiceId == choice.Id ? "selected" : "not-selected") : "")">
                            <div class="question-inner">
                                @choice.Content
                            </div>
                        </div>
                    }
                </div>
                @if (_allPlayers.Length >= 2)
                {
                    var percent = Math.Floor(100 * (double)_answersCount / _allPlayers.Length);

                    <div class="progress mt-2" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar" style="width: @(percent)%"></div>
                    </div>
                }
            }
            else if (CurrentGame.Status == GameStatus.DisplayQuestionResult)
            {
                var validChoice = CurrentGame.CurrentQuestion.Choices.FirstOrDefault(i => i.IsValid);

                <h1 class="text-center mb-3">
                    @CurrentGame.CurrentQuestion.Content
                </h1>

                if (CurrentGame.CurrentQuestion.PresentingAnswerImageId.HasValue)
                {
                    <div class="image-container">
                        <img class="image-details" src="/file/get/@CurrentGame.CurrentQuestion.PresentingAnswerImageId" alt="Question Image" />
                    </div>
                }

                if (_isAdmin)
                {
                    <div class="question-container">
                        @for (var index = 0; index < CurrentGame.CurrentQuestion.Choices.ToArray().Length; index++)
                        {
                            var choice = CurrentGame.CurrentQuestion.Choices.ToArray()[index];
                            <div
                                @onclick="() => OnSelectChoice(choice.Id)"
                                @key="choice.Id"
                                class="question question-@index @(validChoice?.Id == choice.Id ? "valid" : "invalid")">
                                <div class="question-inner">
                                    @choice.Content
                                </div>
                            </div>
                        }
                    </div>
                }
                else if ((_answer is null || !_answer.IsValid))
                {
                    <div class="answer-container answer-failure bg-danger">
                        <i class="fa fa-times fa-3x" aria-hidden="true"></i>
                        <div>La bonne réponse était </div>
                        <div class="fw-bold mt-1"> @(validChoice?.Content ?? "?")</div>
                    </div>
                }
                else
                {
                    <div class="answer-container answer-success bg-success">
                        <i class="fa fa-check fa-4x" aria-hidden="true"></i>
                        <div class="mt-2">Vous marquez @_answer.Score points</div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="col-12 col-md-4">
        @if (_allPlayers.Any() && CurrentGame is not null)
        {
            <div class="mt-3">
                @for (var index = 0; index < _allPlayers.Length; index++)
                {
                    var p = _allPlayers[index];
                    <div class="score-row @(p.Id == _player?.Id ? "fw-bold" : "")">
                        <span class="player-names">
                            @if (index == 0 && p.Score > 100)
                            {
                                <span class="me-1">🏆</span>
                            }
                            else if (index == 1 && p.Score > 100)
                            {
                                <span class="me-1">🔥</span>
                            }
                            else if (index == 2 && p.Score > 100)
                            {
                                <span class="me-1">💯</span>
                            }
                            else if (index == _allPlayers.Length -1 && _allPlayers.Length >= 1 && _allPlayers[0].Score > 300)
                            {
                                <span class="me-1">💩</span>
                            }

                            @p.Name.Substring(0, Math.Min(p.Name.Length, 15))
                            
                            @if (p.LastQuestionSuccess == true)
                            {
                                <span class="m-2">✅</span>
                            }
                        </span>

                        @if (CurrentGame.Status is GameStatus.Completed or GameStatus.AskingQuestion or GameStatus.DisplayQuestionResult)
                        {
                            <span class="badge bg-primary">@p.Score.ToString("### ### ##0")</span>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

<div class="footer">
    <small>Raphael & Virginie 2024 - v0.1</small>
</div>

@code {
    protected override ILogger Logger => HomeLogger;


    private Answer? _answer;
    private Player? _player;
    private Player[] _allPlayers = Array.Empty<Player>();
    private int _answersCount;

    [Inject]
    protected GameService? GameService { get; set; }

    private Timer? _timer;
    private bool _isAdmin;

    private void HeartBeat()
    {
        if (_player is null)
        {
            return;
        }

        CurrentGame?.PlayerHeartBeat(_player);
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("GameId : {GameId}", GameId);
        if (!string.IsNullOrEmpty(GameId) && Guid.TryParse(GameId, out var gameIdGuid))
        {
            CurrentGame = GameStateAccessor.GetGame(gameIdGuid);
        }

        Logger.LogInformation("CurrentGame : {Game}", CurrentGame?.Id);
        if (CurrentGame is null)
        {
            NavigationManager.NavigateTo("/not-found");
            return;
        }
        
        if (await HttpUtils.IsPreRendering())
        {
            Logger.LogInformation("Skipped: Prerendering");
            return;
        }

        _player = await PlayerService.GetPlayer(CurrentGame.Id);
        _isAdmin = await PlayerService.IsAdmin(CurrentGame.Id);
        if (_player is null && !_isAdmin)
        {
            Logger.LogInformation("Player doesn't exist. Redirecting.");
            NavigationManager.NavigateTo("/create-player/" + CurrentGame.Id);
            return;
        }

        if (_player is not null)
        {
            CurrentGame.SetPlayer(_player);
            _timer = new Timer(_ => HeartBeat(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
            _answer = CurrentGame.GetCurrentAnswer(_player.Id);
        }

        _allPlayers = CurrentGame.GetAllPlayers();

        await base.OnInitializedAsync();
    }

    private void OnSelectChoice(int choiceId)
    {
        if (_answer is not null || CurrentGame?.CurrentQuestion is null || _player is null)
        {
            return;
        }

        _answer = new Answer()
        {
            ChoiceId = choiceId,
        };

        GameService?.PlayerSelectsAnswer(CurrentGame.Id, _player.Id, choiceId);
    }

    private void Next()
    {
        if (CurrentGame is null || GameService is null)
        {
            return;
        }

        if (CurrentGame.Status == GameStatus.WaitingForPlayers)
        {
            GameService.StartGame(CurrentGame.Id);
        }
        else if (CurrentGame.Status == GameStatus.DisplayQuestionResult)
        {
            GameService.MoveToNextQuestion(CurrentGame.Id);
        }
        else if (CurrentGame.Status == GameStatus.AskingQuestion)
        {
            GameService.ValidateQuestion(CurrentGame.Id);
        }
    }

    protected override void AfterRefresh()
    {
        if (CurrentGame is null)
        {
            return;
        }

        if (_player is not null)
        {
            _answer = CurrentGame.GetCurrentAnswer(_player.Id);
            _player = CurrentGame.GetPlayer(_player.Id);
        }

        _allPlayers = CurrentGame.GetAllPlayers();
        _answersCount = CurrentGame.GetAnswersCount();
    }

    public override void Dispose()
    {
        _timer?.Dispose();
        base.Dispose();
    }

}