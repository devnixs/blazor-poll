@page "/"
@using Poll.Services
@using Poll.DAL.Entities

@inject HttpUtils httpUtils
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager
@inject GameStateCache GameStateCache
@inject AppSynchronizer AppSynchronizer
@inject ILogger<Home> HomeLogger
@inherits Poll.Components.Components.BaseRefreshableComponent

<PageTitle>Home</PageTitle>

@if (IsAdmin)
{
    <div class="text-end mb-1">
        <button class="btn btn-outline-success me-2" @onclick="Next">
            Next
            <i class="fa fa-arrow-right fa-fw"></i>
        </button>
    </div>
}

<div class="row">
    <div class="col-12 col-md-8">
        <div>
            @if (CurrentGame is not null && CurrentGame.State == GameState.Completed)
            {
                <div class="game-end">🎉</div>
            }
            else if (CurrentQuestion == null || CurrentGame == null || CurrentGame.State == GameState.InPreparation)
            {
                <h1 class="text-center">
                    Le jeu va bientôt démarrer, merci de patienter!
                </h1>
            }
            else if (CurrentGame.State == GameState.AskingQuestion)
            {
                <h1 class="text-center mb-3 question-title">
                    @CurrentQuestion.Content
                </h1>

                <div class="question-container">
                    @for (var index = 0; index < CurrentQuestion.Choices.ToArray().Length; index++)
                    {
                        var choice = CurrentQuestion.Choices.ToArray()[index];
                        <div
                            @onclick="() => OnSelectChoice(choice.Id)"
                            @key="choice.Id"
                            class="question question-@index @(Answer != null ? (Answer.ChoiceId == choice.Id ? "selected" : "not-selected") : "")">
                            <div class="question-inner">
                                @choice.Content
                            </div>
                        </div>
                    }
                </div>
                @if (AllPlayers.Length >= 2)
                {
                    var percent = Math.Floor(100 * (double)AnswersCount / AllPlayers.Length);

                    <div class="progress mt-2" role="progressbar" aria-label="Basic example" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100">
                        <div class="progress-bar" style="width: @(percent)%"></div>
                    </div>
                }
            }
            else if (CurrentGame.State == GameState.DisplayQuestionResult)
            {
                <h1 class="text-center mb-3">
                    @CurrentQuestion.Content
                </h1>
                if (IsAdmin)
                {
                    <div class="answer-container answer-failure bg-success">
                        <i class="fa fa-check fa-4x" aria-hidden="true"></i>
                        <div>La bonne réponse était </div>
                        <div class="fw-bold mt-1"> @(CurrentQuestion.Choices.FirstOrDefault(i => i.IsValid)?.Content ?? "?")</div>
                    </div>
                }
                else if ((Answer is null || !Answer.IsValid))
                {
                    <div class="answer-container answer-failure bg-danger">
                        <i class="fa fa-times fa-3x" aria-hidden="true"></i>
                        <div>La bonne réponse était </div>
                        <div class="fw-bold mt-1"> @(CurrentQuestion.Choices.FirstOrDefault(i => i.IsValid)?.Content ?? "?")</div>
                    </div>
                }
                else
                {
                    <div class="answer-container answer-success bg-success">
                        <i class="fa fa-check fa-4x" aria-hidden="true"></i>
                        <div class="mt-2">Vous marquez @Answer.Score points</div>
                    </div>
                }
            }
        </div>
    </div>
    <div class="col-12 col-md-4">
        @if (AllPlayers.Any() && CurrentGame is not null)
        {
            <div class="mt-3">
                @for (var index = 0; index < AllPlayers.Length; index++)
                {
                    var p = AllPlayers[index];
                    <div class="score-row @(p.Id == Player?.Id ? "fw-bold" : "")">
                        <span class="player-names">
                            @if (index == 0 && p.Score > 100)
                            {
                                <span class="me-1">🏆</span>
                            }
                            else if (index == 1 && p.Score > 100)
                            {
                                <span class="me-1">🔥</span>
                            }
                            else if (index == 2 && p.Score > 100)
                            {
                                <span class="me-1">💯</span>
                            }

                            @p.Name.Substring(0, Math.Min(p.Name.Length, 15))
                        </span>

                        @if (CurrentGame.State is GameState.Completed or GameState.AskingQuestion or GameState.DisplayQuestionResult)
                        {
                            <span class="badge bg-primary">@p.Score</span>
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    protected override ILogger Logger => HomeLogger;
    protected Answer? Answer = null;
    protected Player? Player = null;
    protected Player[] AllPlayers = Array.Empty<Player>();
    protected int AnswersCount = 0;

    private Timer? _timer;
    private bool IsAdmin;

    private void HeartBeat()
    {
        if (Player is null)
        {
            return;
        }

        GameStateCache.PlayerHeartBeat(Player);
    }

    protected override async Task OnInitializedAsync()
    {
        if (await httpUtils.IsPreRendering())
        {
            Logger.LogInformation("Skipped: Prerendering");
            return;
        }

        Player = await PlayerService.GetPlayer();
        IsAdmin = await PlayerService.IsAdmin();
        if (Player is null && !IsAdmin)
        {
            Logger.LogInformation("Player doesn't exist. Redirecting.");
            NavigationManager.NavigateTo("/create-player");
            return;
        }

        if (Player is not null)
        {
            GameStateCache.SetPlayer(Player);
            _timer = new Timer(_ => HeartBeat(), null, TimeSpan.Zero, TimeSpan.FromSeconds(5));
        }

        AppSynchronizer.SubscribePlayerCountChanged(OnPlayerCountChanged);
        AppSynchronizer.SubscribeNewAnswer(OnNewAnswer);
        AllPlayers = GameStateCache.GetAllPlayers();

        await base.OnInitializedAsync();
    }

    protected async Task OnSelectChoice(int choiceId)
    {
        if (Answer is not null || CurrentQuestion is null || CurrentGame is null || Player is null)
        {
            return;
        }

        Answer = new Answer()
        {
            ChoiceId = choiceId,
        };

        StateHasChanged();

        Answer = await DatabaseWriteContextProvider.Write<GameService, Answer?>(
            async svc => await svc.PlayerSelectsAnswer(Player.Id, choiceId));
    }

    private async Task Next()
    {
        await DatabaseWriteContextProvider.Write<GameService, int>(async svc =>
        {
            if (CurrentGame is null)
            {
                return 0;
            }

            if (CurrentGame.State == GameState.InPreparation)
            {
                await svc.SetGameWaitingForPlayers(CurrentGame.Id);
            }
            else if (CurrentGame.State == GameState.WaitingForPlayers)
            {
                await svc.StartGame(CurrentGame.Id);
            }
            else if (CurrentGame.State == GameState.DisplayQuestionResult)
            {
                await svc.MoveToNextQuestion();
            }
            else if (CurrentGame.State == GameState.AskingQuestion)
            {
                await svc.ValidateQuestion();
            }
            else if (CurrentGame.State == GameState.Completed)
            {
                await svc.ResetGame();
            }

            return 0;
        });
    }

    protected override async Task AfterRefresh(bool isFirst)
    {
        if (CurrentQuestion is null || CurrentGame is null || Player is null)
        {
            Answer = null;
            return;
        }

        Answer = GameStateCache.GetCurrentAnswer(Player.Id);
        Player = GameStateCache.GetPlayer(Player.Id);
        AllPlayers = GameStateCache.GetAllPlayers();
        AnswersCount = GameStateCache.GetAnswersCount();
    }

    public override void Dispose()
    {
        _timer?.Dispose();
        base.Dispose();
        AppSynchronizer.UnsubscribePlayerCountChanged(OnPlayerCountChanged);
        AppSynchronizer.UnsubscribeNewAnswer(OnNewAnswer);
    }

    private void OnPlayerCountChanged()
    {
        AllPlayers = GameStateCache.GetAllPlayers();
        InvokeAsync(StateHasChanged);
    }

    private void OnNewAnswer()
    {
        AnswersCount = GameStateCache.GetAnswersCount();
        InvokeAsync(StateHasChanged);
    }

}