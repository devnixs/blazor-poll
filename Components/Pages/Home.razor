@page "/"
@using Poll.Services
@using Poll.DAL.Entities

@inject HttpUtils httpUtils
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager
@inject ILogger<Home> HomeLogger
@inherits Poll.Components.Components.BaseRefreshableComponent

<PageTitle>Home</PageTitle>
@if (CurrentQuestion == null || CurrentGame == null || CurrentGame.State == GameState.InPreparation)
{
    <h1>
        Le jeu va bientôt démarrer, merci de patienter!
    </h1>
}
else
{
    <h1>
        @CurrentQuestion.Content
    </h1>
    
    <div class="question-container">
        @for (var index = 0; index < CurrentQuestion.Choices.ToArray().Length; index++)
        {
            var choice = CurrentQuestion.Choices.ToArray()[index];
            <div class="question question-@index">@choice.Content</div>
        }
    </div>
    
}

@code {
    protected override ILogger Logger => HomeLogger;
    
    protected override async Task OnInitializedAsync()
    {
        if (await httpUtils.IsPreRendering())
        {
            Logger.LogInformation("Skipped: Prerendering");
            return;
        }
        
        var player = await PlayerService.GetPlayer();
        if (player is null)
        {
            Logger.LogInformation("Player doesn't exist. Redirecting.");
            NavigationManager.NavigateTo("/create-player");
        }

        await base.OnInitializedAsync();
    }

}