@page "/new-game"
@page "/new-game/{IdentifierParameter}"
@using Microsoft.EntityFrameworkCore
@using Poll.DAL.Services
@using Poll.DAL
@using Poll.DAL.Entities
@using Poll.Components.Components
@using Poll.Services
@inject DatabaseWriteContextProvider DatabaseWriteContextProvider 
@inject DatabaseReadContextProvider DatabaseReadContextProvider 
@inject NavigationManager NavigationManager 
@inject ILogger<NewGame> Logger;
@inject GameCreatorService GameCreatorService;
@inject HttpUtils HttpUtils;
@implements IDisposable;
@implements IAsyncDisposable;

<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="top-bar">
    <span>Thera Engineering @(DateTimeOffset.UtcNow.Year) </span>
</Microsoft.AspNetCore.Components.Sections.SectionContent>

<div class="container mt-5">
    <h2 class="mb-4">Nouveau jeu</h2>
    <EditForm EditContext="_editContext" OnValidSubmit="OnValidSubmit" FormName="NewGame">
        <div class="mb-3">
            <label for="name" class="form-label">Nom du jeu</label>
            <InputText type="text" class="form-control" @bind-Value="_model.Name" id="name" placeholder=""/>
            <ValidationMessage For="() => _model.Name"></ValidationMessage>
        </div>

        <hr/>

        @for (var questionIndex = 0; questionIndex < _model.Questions.Count; questionIndex++)
        {
            var question = _model.Questions[questionIndex];
            var i1 = questionIndex;

            <div class="border border-1 rounded-1 p-3 mb-3">
                <div class="mb-3">
                    <label for="@($"questionTitle-{i1}")" class="form-label">Titre de la question #@(i1 + 1)</label>
                    <InputText type="text" @bind-Value="question.Name" id="@($"questionTitle-{i1}")" class="form-control"/>
                    <ValidationMessage For="() => question.Name"></ValidationMessage>
                </div>
                <div class="mb-5">
                    <label for="@($"QuestionImage-{i1}")" class="form-label">Image facultative affichée pendant que la question est posée</label>
                    <ImageUpload value="@question.QuestionImageId" OnFileReady="(id) => question.QuestionImageId = id"/>
                    <ValidationMessage For="() => question.QuestionImageId"></ValidationMessage>
                </div>
                <div class="mb-5">
                    <label for="@($"ResponseImage-{i1}")" class="form-label">Image facultative affichée pendant que la réponse est présentée</label>
                    <ImageUpload value="@question.ResponseImageId" OnFileReady="(id) => question.ResponseImageId = id"/>
                    <ValidationMessage For="() => question.ResponseImageId"></ValidationMessage>
                </div>


                @for (var choiceIndex = 0; choiceIndex < question.Choices.Count; choiceIndex++)
                {
                    var choice = question.Choices[choiceIndex];
                    var i2 = choiceIndex;

                    <div class="row offset-lg-1 align-items-center mb-4">
                        <div class="col-md-4">
                            <InputText type="text" placeholder="@($"Choix #{i2 + 1}")" @bind-Value="choice.Content" id="@($"ChoiceText-{i1}-{i2}")" class="form-control"/>
                            <ValidationMessage For="() => _model.Name"></ValidationMessage>
                        </div>

                        <div class="col-md-4">
                            <div class="form-check">
                                <InputCheckbox class="form-check-input" @bind-Value:after="() => OnValidChoiceUpdated(i1, i2)" @bind-Value="@choice.IsValid" type="checkbox" id="@($"ChoiceValid-{i1}-{i2}")"/>
                                <label class="form-check-label" for="@($"ChoiceValid-{i1}-{i2}")">
                                    Bonne réponse?
                                </label>
                            </div>
                        </div>

                        <div class="col col-md-4">
                            <button type="button" disabled="@(_model.Questions[i1].Choices.Count <= 1)" class="btn btn-link p-0" @onclick="() => DeleteChoice(i1, i2)">Supprimer ce choix</button>
                        </div>
                    </div>
                }
                <div class="offset-lg-1">
                    <ValidationMessage For="() => question.Choices"></ValidationMessage>
                </div>
                <div class="offset-lg-1">
                    <button type="button" @onclick="() => AddChoice(i1)" class="btn btn-secondary text-white"><i class="fa fa-plus"></i> Ajouter un choix</button>
                </div>


                <button type="button" disabled="@(_model.Questions.Count == 1)" class="btn btn-link mt-3 p-0" @onclick="() => DeleteQuestion(i1)">Supprimer cette question</button>
            </div>
        }
        <div class="">
            <button type="button" @onclick="AddQuestion" class="btn btn-primary text-white"><i class="fa fa-plus"></i> Ajouter une question</button>
        </div>

        <FluentValidationValidator/>

        <button type="submit" class="btn btn-primary mt-3">Envoyer</button>
    </EditForm>

</div>

@code{

    [Parameter]
    public string? IdentifierParameter { get; set; }

    public Guid? Identifier => Guid.TryParse(IdentifierParameter, out var result) ? result : null;

    private NewGameModel _model = new NewGameModel()
    {
        Questions = new List<QuestionModel>
        {
            QuestionModel.Default,
        },
    };

    private Timer? _saveTimer = null;

    EditContext? _editContext;

    public async Task OnValidSubmit()
    {
        Logger.LogInformation("Form Submitted (valid)");

        var template = await GameCreatorService.CreateGame(_model);

        NavigationManager.NavigateTo("/template/" + template.Identifier + "?Success=true");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _saveTimer = new Timer(cb => { SaveData(); }, null, TimeSpan.Zero, TimeSpan.FromSeconds(15));
        }

        return base.OnAfterRenderAsync(firstRender);
    }

    private void SaveData()
    {
        if (Identifier.HasValue)
        {
            GameCreatorService.SaveFormState(_model, Identifier.Value);
        }
    }

    private void AddChoice(int questionIndex)
    {
        _model.Questions[questionIndex].Choices.Add(ChoiceModel.Default);
    }

    private void AddQuestion()
    {
        _model.Questions.Add(QuestionModel.Default);
    }

    private void DeleteChoice(int questionIndex, int choiceIndex)
    {
        if (_model.Questions[questionIndex].Choices.Count <= 2)
        {
            return;
        }

        _model.Questions[questionIndex].Choices = _model.Questions[questionIndex].Choices.Where((_, index) => index != choiceIndex).ToList();
    }

    private void DeleteQuestion(int questionIndex)
    {
        if (_model.Questions.Count == 1)
        {
            return;
        }

        _model.Questions = _model.Questions.Where((_, index) => index != questionIndex).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        _model = new()
        {
            Name = "",
            Questions = new List<QuestionModel>()
            {
                QuestionModel.Default,
            },
        };
        _editContext = new(_model);

        if (Identifier is null)
        {
            if (!(await HttpUtils.IsPreRendering()))
            {
                NavigationManager.NavigateTo("/new-game/" + Guid.NewGuid());
                return;
            }
        }
        else
        {
            var existingForm = GameCreatorService.RestoreFormState(Identifier.Value);
            if (existingForm is not null)
            {
                _model = existingForm;
            }
        }

        _editContext = new(_model);
    }

    private void OnValidChoiceUpdated(int questionIndex, int choiceIndex)
    {
        for (var index = 0; index < _model.Questions[questionIndex].Choices.Count; index++)
        {
            var choice = _model.Questions[questionIndex].Choices[index];
            choice.IsValid = index == choiceIndex;
        }
    }

    public void Dispose()
    {
        _saveTimer?.Dispose();

        if (Identifier.HasValue)
        {
            GameCreatorService.CleanFormState(Identifier.Value);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_saveTimer != null)
        {
            await _saveTimer.DisposeAsync();
        }
    }

}