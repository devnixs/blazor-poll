@page "/template/{TemplateIdentifier}"
@using Poll.DAL.Entities
@using Poll.DAL.Services
@using Poll.DAL
@using Microsoft.EntityFrameworkCore
@using Poll.Services
@inject DatabaseReadContextProvider DatabaseReadContextProvider
@inject ILogger<Admin> Logger
@inject GameStateAccessor GameStateAccessor 
@inject NavigationManager NavigationManager 
@inject PlayerService PlayerService 
@inject IWebHostEnvironment Env 

<PageTitle>Admin</PageTitle>

<Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="top-bar">
    <span>Thera Engineering @(DateTimeOffset.UtcNow.Year) </span>
</Microsoft.AspNetCore.Components.Sections.SectionContent>

<div class="">
    @if (Success)
    {
        <div class="alert alert-success">
            Ce jeu a été créé. Conservez cette URL soigneusement pour pouvoir démarrer la partie en temps voulu:
            <br/>
            <br/>
            <input class="form-control" value="@Url" disabled>
        </div>
    }

    <div>
        @if (_loading)
        {
            <div>Chargement...</div>
        }
        else if (_template == null)
        {
            <div>Jeu non trouvé.</div>
        }
        else
        {
            <div class="card" style="width: 18rem;">
                <div class="card-body">
                    <h5 class="card-title">@_template.Name</h5>
                    <p class="card-text">Créé le @_template.CreationDate.ToString("dd/MM/yyy")</p>
                    @if (_startingGame)
                    {
                        <a class="btn btn-primary"><i class="fa fa-refresh fa-spin fa-fw me-1"></i> Démarrer</a>
                        <a class="btn btn-secondary"><i class="fa fa-pencil-o fa-fw me-1"></i> Edit</a>
                    }
                    else
                    {
                        <a @onclick="() => StartGame(_template.Id)" class="btn btn-primary"><i class="fa fa-arrow-right fa-fw me-1"></i> Démarrer</a> <br/><br/>
                        <a href="/edit-game/@_template.Identifier" class="btn btn-secondary"><i class="fa fa-pencil fa-fw me-1"></i> Edit</a>
                    }
                </div>
            </div>
        }

    </div>
</div>


@code {
    private GameTemplate? _template;
    private bool _startingGame;
    private bool _loading = true;

    [Inject]
    public IHttpContextAccessor? CtxAccessor { get; set; }
    
    [Parameter]
    public string? TemplateIdentifier { get; set; }
    
    [SupplyParameterFromQuery]
    public bool Success { get; set; }

    public string Url { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        _template = await DatabaseReadContextProvider.Read<PollContext, GameTemplate?>(async db => await db.GameTemplates.SingleOrDefaultAsync(i => i.Identifier == TemplateIdentifier));
        _loading = false;
        
        var ctx = CtxAccessor?.HttpContext;
        if(ctx is not null && _template is not null)
        {
            var hostName = ctx.Request.Host.ToString();
            var scheme = Env.IsProduction() ? "https" : ctx.Request.Scheme;

            Url = $"{scheme}://{hostName}/template/{_template.Identifier}";
        }


        await base.OnInitializedAsync();
    }

    private async Task StartGame(int gameTemplateId)
    {
        Logger.LogInformation("Starting game for template {}", gameTemplateId);
        _startingGame = true;
        var game = await GameStateAccessor.CreateGame(gameTemplateId);
        NavigationManager.NavigateTo("/game/" + game.Id);
        await PlayerService.SetAdmin(game.Id);
    }
}